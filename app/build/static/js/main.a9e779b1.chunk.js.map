{"version":3,"sources":["utils/createAddressLookupTable.ts","utils/createTransferTransaction.ts","utils/createTransferTransactionV0.ts","utils/extendAddressLookupTable.ts","utils/getProvider.ts","utils/hexToRGB.ts","utils/pollSignatureStatus.ts","utils/signAllTransactions.ts","utils/signAndSendTransaction.ts","utils/signAndSendTransactionV0WithLookupTable.ts","utils/signMessage.ts","utils/signTransaction.ts","constants.ts","components/Button/index.tsx","components/Logs/Log.tsx","components/Logs/index.tsx","components/NoProvider/index.tsx","components/Sidebar/index.tsx","App.tsx","index.tsx"],"names":["createAddressLookupTable","provider","publicKey","connection","blockhash","getSlot","slot","AddressLookupTableProgram","createLookupTable","authority","payer","recentSlot","lookupTableInst","lookupTableAddress","console","log","toBase58","lookupMessage","TransactionMessage","payerKey","recentBlockhash","instructions","compileToV0Message","lookupTransaction","VersionedTransaction","signAndSendTransaction","lookupSignature","createTransferTransaction","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","feePayer","anyTransaction","getLatestBlockhash","createTransferTransactionV0","getMinimumBalanceForRentExemption","minRent","then","res","messageV0","transactionV0","extendAddressLookupTable","extendInstruction","extendLookupTable","lookupTable","addresses","programId","extensionMessageV0","extensionTransactionV0","extensionSignature","confirmTransaction","status","value","err","Error","JSON","stringify","getProvider","window","phantom","solana","isPhantom","open","hexToRGB","hex","alpha","r","parseInt","slice","g","b","pollSignatureStatus","signature","createLog","count","interval","setInterval","clearInterval","method","message","messageTwo","getSignatureStatus","confirmationStatus","hasReachedSufficientCommitment","charAt","toUpperCase","signAllTransactions","transaction1","transaction2","transactions","warn","skipPreflight","signAndSendTransactionV0WithLookupTable","getAddressLookupTable","lookupTableAccount","key","i","state","length","address","signMessage","encodedMessage","TextEncoder","encode","signedMessage","signTransaction","signedTransaction","PURPLE","WHITE","GRAY","REACT_GRAY","DARK_GRAY","LIGHT_GRAY","Button","styled","button","Column","div","Row","StyledSpan","span","props","Method","p","Message","Log","React","memo","StyledSection","section","ClearLogsButton","PlaceholderMessage","Logs","logs","clearLogs","map","onClick","role","StyledMain","main","NoProvider","Main","Body","Link","a","attrs","href","target","rel","Subtitle","h5","Pre","pre","Badge","Divider","Tag","Sidebar","connectedMethods","connect","src","alt","width","name","StyledApp","Connection","StatelessApp","handleConnect","App","useState","setLogs","useCallback","useEffect","onlyIfTrusted","catch","on","error","disconnect","handleSignAndSendTransaction","handleSignAndSendTransactionV0","handleSignAndSendTransactionV0WithLookupTable","handleSignTransaction","handleSignAllTransactions","signedTransactions","handleSignMessage","handleDisconnect","useMemo","useProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9e779b1.chunk.js","sourcesContent":["import {\n  AddressLookupTableProgram,\n  Connection,\n  PublicKey,\n  TransactionMessage,\n  VersionedTransaction,\n} from '@solana/web3.js';\n\nimport { PhantomProvider } from '../types';\nimport { signAndSendTransaction } from '.';\n\n/**\n * 1. Creates an Address Lookup Table Instruction\n * 2. Signs and sends it in a transactionV0\n * \n * @param   {String}      publicKey  a public key\n * @param   {Connection}  connection an RPC connection\n * @param   {String}  publicKey recent blockhash\n * @returns {[VersionedTransaction, String]} array of transaction\n *          signature and lookup table address\n */\nconst createAddressLookupTable = async (\n  provider: PhantomProvider,\n  publicKey: PublicKey,\n  connection: Connection,\n  blockhash: string\n): Promise<[string, PublicKey]> => {\n\n  // get current `slot`\n  let slot = await connection.getSlot();\n\n  // create an Address Lookup Table\n  const [lookupTableInst, lookupTableAddress] = AddressLookupTableProgram.createLookupTable({\n    authority: publicKey,\n    payer: publicKey,\n    recentSlot: slot,\n  });\n\n  console.log('lookup table address:', lookupTableAddress.toBase58());\n\n  // To create the Address Lookup Table on chain:\n  // send the `lookupTableInst` instruction in a transaction\n  const lookupMessage = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: blockhash,\n    instructions: [lookupTableInst],\n  }).compileToV0Message();\n\n  const lookupTransaction = new VersionedTransaction(lookupMessage);\n  const lookupSignature = await signAndSendTransaction(provider, lookupTransaction);\n  console.log('Sent transaction for lookup table:', lookupSignature);\n\n  return [lookupSignature, lookupTableAddress]\n};\n\nexport default createAddressLookupTable;\n","import { Transaction, SystemProgram, Connection, PublicKey } from '@solana/web3.js';\n\n/**\n * Creates an arbitrary transfer transaction\n * @param   {String}      publicKey  a public key\n * @param   {Connection}  connection an RPC connection\n * @returns {Transaction}            a transaction\n */\nconst createTransferTransaction = async (publicKey: PublicKey, connection: Connection): Promise<Transaction> => {\n  const transaction = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: publicKey,\n      lamports: 100,\n    })\n  );\n  transaction.feePayer = publicKey;\n\n  const anyTransaction: any = transaction;\n  anyTransaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n\n  return transaction;\n};\n\nexport default createTransferTransaction;\n","import { TransactionMessage, VersionedTransaction, SystemProgram, Connection, PublicKey } from '@solana/web3.js';\n\n/**\n * Creates an arbitrary transfer transactionV0 (Versioned Transaction)\n * @param   {String}      publicKey  a public key\n * @param   {Connection}  connection an RPC connection\n * @returns {VersionedTransaction}            a transactionV0\n */\nconst createTransferTransactionV0 = async (\n  publicKey: PublicKey,\n  connection: Connection\n): Promise<VersionedTransaction> => {\n  // connect to the cluster and get the minimum rent for rent exempt status\n  // perform this step to get an \"arbitrary\" amount to transfer\n  let minRent = await connection.getMinimumBalanceForRentExemption(0);\n\n  // get latest `blockhash`\n  let blockhash = await connection.getLatestBlockhash().then((res) => res.blockhash);\n\n  // create an array with your desired `instructions`\n  // in this case, just a transfer instruction\n  const instructions = [\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: publicKey,\n      lamports: minRent,\n    }),\n  ];\n\n  // create v0 compatible message\n  const messageV0 = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: blockhash,\n    instructions,\n  }).compileToV0Message();\n\n  // make a versioned transaction\n  const transactionV0 = new VersionedTransaction(messageV0);\n\n  return transactionV0;\n};\n\nexport default createTransferTransactionV0;\n","import {\n  AddressLookupTableProgram,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionMessage,\n  VersionedTransaction,\n} from '@solana/web3.js';\n\nimport { PhantomProvider } from '../types';\nimport { signAndSendTransaction } from '.';\n\n/**\n * 1. Extends (add addresses) the table\n * 2. Signs and sends the extension instruction\n * \n * @param   {String}      publicKey  a public key\n * @param   {Connection}  connection an RPC connection\n * @param   {String}  publicKey recent blockhash\n * @param   {String} publicKey  address of the lookup table\n * @returns {String} signature of confirmed transaction\n */\nconst extendAddressLookupTable = async (\n  provider: PhantomProvider,\n  publicKey: PublicKey,\n  connection: Connection,\n  blockhash: string,\n  lookupTableAddress: PublicKey\n): Promise<string> => {\n\n  // add addresses to the `lookupTableAddress` table via an `extend` instruction\n  const extendInstruction = AddressLookupTableProgram.extendLookupTable({\n    payer: publicKey,\n    authority: publicKey,\n    lookupTable: lookupTableAddress,\n    addresses: [\n      publicKey,\n      SystemProgram.programId,\n      // more `publicKey` addresses can be listed here\n    ],\n  });\n\n  // Send this `extendInstruction` in a transaction to the cluster\n  // to insert the listing of `addresses` into your lookup table with address `lookupTableAddress`\n  const extensionMessageV0 = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: blockhash,\n    instructions: [extendInstruction],\n  }).compileToV0Message();\n\n  const extensionTransactionV0 = new VersionedTransaction(extensionMessageV0);\n  const extensionSignature = await signAndSendTransaction(provider, extensionTransactionV0);\n\n  // Confirm transaction: we will have to wait for the transaction to fetch the\n  // lookup table account before proceeding: takes around 3-5 seconds to fetch.\n  const status = (await connection.confirmTransaction(extensionSignature)).value;\n  if (status.err) {\n    throw new Error(`Transaction ${extensionSignature} failed (${JSON.stringify(status)})`);\n  }\n  console.log('Sent transaction for lookup table extension:', extensionSignature);\n\n  return extensionSignature\n};\n\nexport default extendAddressLookupTable;\n","import { PhantomProvider } from '../types';\n\n/**\n * Retrieves the Phantom Provider from the window object\n * @returns {PhantomProvider | undefined} a Phantom provider if one exists in the window\n */\nconst getProvider = (): PhantomProvider | undefined => {\n  if ('phantom' in window) {\n    const anyWindow: any = window;\n    const provider = anyWindow.phantom?.solana;\n\n    if (provider?.isPhantom) {\n      return provider;\n    }\n  }\n\n  window.open('https://phantom.app/', '_blank');\n};\n\nexport default getProvider;\n","/**\n * Returns a color from a hex string and alpha numeric\n * @param   {String} hex   a hex string\n * @param   {Number} alpha an alpha numeric\n * @returns {String}       a formatted rgba\n */\nconst hexToRGB = (hex: string, alpha: number) => {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  return `rgba(${r},${g},${b},${alpha})`;\n};\n\nexport default hexToRGB;\n","import { Connection } from '@solana/web3.js';\n\nimport { TLog } from '../types';\n\nconst POLLING_INTERVAL = 1000; // one second\nconst MAX_POLLS = 30;\n\n/**\n * Polls for transaction signature statuses\n * @param   {String}     signature  a transaction signature\n * @param   {Connection} connection an RPC connection\n * @param   {Function}   createLog  a function to create log\n * @returns\n */\nconst pollSignatureStatus = async (\n  signature: string,\n  connection: Connection,\n  createLog: (log: TLog) => void\n): Promise<void> => {\n  let count = 0;\n\n  const interval = setInterval(async () => {\n    // Failed to confirm transaction in time\n    if (count === MAX_POLLS) {\n      clearInterval(interval);\n      createLog({\n        status: 'error',\n        method: 'signAndSendTransaction',\n        message: `Transaction: ${signature}`,\n        messageTwo: `Failed to confirm transaction within ${MAX_POLLS} seconds. The transaction may or may not have succeeded.`,\n      });\n      return;\n    }\n\n    const { value } = await connection.getSignatureStatus(signature);\n    const confirmationStatus = value?.confirmationStatus;\n\n    if (confirmationStatus) {\n      const hasReachedSufficientCommitment = confirmationStatus === 'confirmed' || confirmationStatus === 'finalized';\n\n      createLog({\n        status: hasReachedSufficientCommitment ? 'success' : 'info',\n        method: 'signAndSendTransaction',\n        message: `Transaction: ${signature}`,\n        messageTwo: `Status: ${confirmationStatus.charAt(0).toUpperCase() + confirmationStatus.slice(1)}`,\n      });\n\n      if (hasReachedSufficientCommitment) {\n        clearInterval(interval);\n        return;\n      }\n    } else {\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransaction',\n        message: `Transaction: ${signature}`,\n        messageTwo: 'Status: Waiting on confirmation...',\n      });\n    }\n\n    count++;\n  }, POLLING_INTERVAL);\n};\n\nexport default pollSignatureStatus;\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\n\nimport { PhantomProvider } from '../types';\n\n/**\n * Signs an array of transactions\n * @param   {PhantomProvider} provider     a Phantom provider\n * @param   {Transaction | VersionedTransaction}     transaction1 a transaction to sign\n * @param   {Transaction | VersionedTransaction}     transaction2 a transaction to sign\n * @returns {(Transaction | VersionedTransaction)[]}                an array of signed transactions\n */\nconst signAllTransactions = async (\n  provider: PhantomProvider,\n  transaction1: Transaction | VersionedTransaction,\n  transaction2: Transaction | VersionedTransaction\n): Promise<(Transaction | VersionedTransaction)[]> => {\n  try {\n    const transactions = await provider.signAllTransactions([transaction1, transaction2]);\n    return transactions;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default signAllTransactions;\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\n\nimport { PhantomProvider } from '../types';\n\n/**\n * Signs and sends transaction\n * @param   {PhantomProvider} provider    a Phantom Provider\n * @param   {Transaction}     transaction a transaction to sign\n * @returns {Transaction}                 a signed transaction\n */\nconst signAndSendTransaction = async (\n  provider: PhantomProvider,\n  transaction: Transaction | VersionedTransaction\n): Promise<string> => {\n  try {\n    const { signature } = await provider.signAndSendTransaction(transaction, {skipPreflight: false});\n    return signature;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default signAndSendTransaction;\n","import {\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionMessage,\n  VersionedTransaction,\n} from '@solana/web3.js';\n\nimport { PhantomProvider } from '../types';\nimport {\n  createAddressLookupTable,\n  extendAddressLookupTable,\n  signAndSendTransaction,\n} from '.';\nimport { Logs } from '../components';\n\n/**\n * Creates an arbitrary transfer transactionV0 (Versioned Transaction),\n * uses the Address Lookup Table to fetch the accounts,\n * signs this transaction and sends it.\n * @param   {String}      publicKey  a public key\n * @param   {Connection}  connection an RPC connection\n * @param   {String}  publicKey recent blockhash\n * @param   {String} publicKey  address of the lookup table\n * @returns {VersionedTransaction}   a transactionV0\n */\nconst signAndSendTransactionV0WithLookupTable = async (\n  provider: PhantomProvider,\n  publicKey: PublicKey,\n  connection: Connection,\n  blockhash: string,\n  lookupTableAddress: PublicKey\n): Promise<string> => {\n\n  // connect to the cluster and get the minimum rent for rent exempt status\n  // perform this step to get an \"arbitrary\" amount to transfer\n  let minRent = await connection.getMinimumBalanceForRentExemption(0);\n\n  // similar to requesting another account (or PDA) from the cluster,\n  // you can fetch a complete Address Lookup Table with\n  // the getAddressLookupTable method\n\n  // get the table from the cluster\n  const lookupTableAccount = await connection.getAddressLookupTable(lookupTableAddress).then((res) => res.value);\n  // `lookupTableAccount` will now be a `AddressLookupTableAccount` object\n  console.log('Table address from cluster:', lookupTableAccount.key.toBase58());\n\n  // Our lookupTableAccount variable will now be a AddressLookupTableAccount\n  // object which we can parse to read the listing of all\n  // the addresses stored on chain in the lookup table\n\n  // Loop through and parse all the address stored in the table\n  for (let i = 0; i < lookupTableAccount.state.addresses.length; i++) {\n    const address = lookupTableAccount.state.addresses[i];\n    console.log(i, address.toBase58());\n  }\n\n  // create an array with your desired `instructions`\n  // in this case, just a transfer instruction\n  const instructions = [\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: publicKey,\n      lamports: minRent,\n    }),\n  ];\n\n  // create v0 compatible message\n  const messageV0 = new TransactionMessage({\n    payerKey: publicKey,\n    recentBlockhash: blockhash,\n    instructions,\n  }).compileToV0Message([lookupTableAccount]);\n\n  // make a versioned transaction\n  const transactionV0 = new VersionedTransaction(messageV0);\n  const signature = await signAndSendTransaction(provider, transactionV0);\n  return signature;\n};\n\nexport default signAndSendTransactionV0WithLookupTable;\n","import { PhantomProvider } from '../types';\n\n/**\n * Signs a message\n * @param   {PhantomProvider} provider a Phantom Provider\n * @param   {String}          message  a message to sign\n * @returns {Any}                      TODO(get type)\n */\nconst signMessage = async (provider: PhantomProvider, message: string): Promise<string> => {\n  try {\n    const encodedMessage = new TextEncoder().encode(message);\n    const signedMessage = await provider.signMessage(encodedMessage);\n    return signedMessage;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default signMessage;\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\n\nimport { PhantomProvider } from '../types';\n\n/**\n * Signs a transaction\n * @param   {PhantomProvider} provider    a Phantom Provider\n * @param   {Transaction | VersionedTransaction}     transaction a transaction to sign\n * @returns {Transaction | VersionedTransaction}                 a signed transaction\n */\nconst signTransaction = async (\n  provider: PhantomProvider,\n  transaction: Transaction | VersionedTransaction\n): Promise<Transaction | VersionedTransaction> => {\n  try {\n    const signedTransaction = await provider.signTransaction(transaction);\n    return signedTransaction;\n  } catch (error) {\n    console.warn(error);\n    throw new Error(error.message);\n  }\n};\n\nexport default signTransaction;\n","// =============================================================================\n// Colors\n// =============================================================================\n\nexport const RED = '#EB3742';\nexport const YELLOW = '#FFDC62';\nexport const GREEN = '#21E56F';\nexport const BLUE = '#59cff7';\nexport const PURPLE = '#8A81F8';\nexport const WHITE = '#FFFFFF';\nexport const GRAY = '#777777';\nexport const REACT_GRAY = '#222222';\nexport const DARK_GRAY = '#333333';\nexport const LIGHT_GRAY = '#444444';\nexport const BLACK = '#000000';\n","import styled from 'styled-components';\n\nimport { WHITE, DARK_GRAY, LIGHT_GRAY } from '../../constants';\n\nimport { hexToRGB } from '../../utils';\n\nconst Button = styled.button`\n  cursor: pointer;\n  width: 100%;\n  color: ${WHITE};\n  background-color: ${DARK_GRAY};\n  padding: 15px 10px;\n  font-weight: 600;\n  outline: 0;\n  border: 0;\n  border-radius: 6px;\n  user-select: none;\n  &:hover {\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.9)};\n  }\n  &:focus-visible&:not(:hover) {\n    background-color: ${hexToRGB(LIGHT_GRAY, 0.8)};\n  }\n  &:active {\n    background-color: ${LIGHT_GRAY};\n  }\n`;\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Status, TLog } from '../../types';\n\nimport { RED, YELLOW, GREEN, BLUE, PURPLE } from '../../constants';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  line-height: 1.5;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledSpan = styled.span<{ status: Status }>`\n  color: ${(props) => {\n    switch (props.status) {\n      case 'success':\n        return GREEN;\n      case 'warning':\n        return YELLOW;\n      case 'error':\n        return RED;\n      case 'info':\n        return BLUE;\n    }\n  }};\n  margin-right: 5px;\n`;\n\nconst Method = styled.p`\n  color: ${PURPLE};\n  margin-right: 10px;\n`;\n\nconst Message = styled.p`\n  overflow-wrap: break-word;\n`;\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\nconst Log = React.memo((props: TLog) => (\n  <Column>\n    <Row>\n      <StyledSpan status={props.status}>\n        {'>'} {props.status}\n      </StyledSpan>\n      {props.method && <Method>[{props.method}]</Method>}\n    </Row>\n    <Message>{props.message}</Message>\n    {props.messageTwo && <Message>{props.messageTwo}</Message>}\n  </Column>\n));\n\nexport default Log;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { PublicKey } from '@solana/web3.js';\n\nimport { TLog } from '../../types';\n\nimport { BLACK, GRAY } from '../../constants';\n\nimport Button from '../Button';\nimport Log from './Log';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst StyledSection = styled.section`\n  position: relative;\n  flex: 2;\n  padding: 20px;\n  background-color: ${BLACK};\n  overflow: auto;\n  font-family: monospace;\n`;\n\nconst ClearLogsButton = styled(Button)`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 100px;\n`;\n\nconst PlaceholderMessage = styled.p`\n  color: ${GRAY};\n`;\n\nconst Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  span {\n    margin-right: 10px;\n  }\n`;\n\n// =============================================================================\n// Typedefs\n// =============================================================================\n\ninterface Props {\n  publicKey: PublicKey | null;\n  logs: TLog[];\n  clearLogs: () => void;\n}\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\nconst Logs = React.memo((props: Props) => {\n  const { publicKey, logs, clearLogs } = props;\n\n  return (\n    <StyledSection>\n      {logs.length > 0 ? (\n        <>\n          {logs.map((log, i) => (\n            <Log key={`${log.status}-${log.method}-${i}`} {...log} />\n          ))}\n          <ClearLogsButton onClick={clearLogs}>Clear Logs</ClearLogsButton>\n        </>\n      ) : (\n        <Row>\n          <span>{'>'}</span>\n          <PlaceholderMessage>\n            {publicKey ? (\n              // connected\n              <>\n                Click a button and watch magic happen...{' '}\n                <span role=\"img\" aria-label=\"Sparkles Emoji\">\n                  ✨\n                </span>\n              </>\n            ) : (\n              // not connected\n              <>\n                Welcome to the Phantom sandbox. Connect to your Phantom wallet and play around...{' '}\n                <span role=\"img\" aria-label=\"Ghost Emoji\">\n                  👻\n                </span>\n              </>\n            )}\n          </PlaceholderMessage>\n        </Row>\n      )}\n    </StyledSection>\n  );\n});\n\nexport default Logs;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { REACT_GRAY } from '../../constants';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst StyledMain = styled.main`\n  padding: 20px;\n  height: 100vh;\n  background-color: ${REACT_GRAY};\n`;\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\n// TODO: @PHANTOM-TEAM: Let's improve this UI\nconst NoProvider = () => {\n  return (\n    <StyledMain>\n      <h2>Could not find a provider</h2>\n    </StyledMain>\n  );\n};\n\nexport default NoProvider;\n","import React from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport styled from 'styled-components';\n\nimport { GRAY, REACT_GRAY, PURPLE, WHITE, DARK_GRAY } from '../../constants';\n\nimport { hexToRGB } from '../../utils';\n\nimport Button from '../Button';\nimport { ConnectedMethods } from '../../App';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst Main = styled.main`\n  position: relative;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 20px;\n  align-items: center;\n  background-color: ${REACT_GRAY};\n  > * {\n    margin-bottom: 10px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n    height: auto;\n  }\n`;\n\nconst Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  button {\n    margin-bottom: 15px;\n  }\n`;\n\nconst Link = styled.a.attrs({\n  href: 'https://phantom.app/',\n  target: '_blank',\n  rel: 'noopener noreferrer',\n})`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  text-decoration: none;\n  margin-bottom: 30px;\n  padding: 5px;\n  &:focus-visible {\n    outline: 2px solid ${hexToRGB(GRAY, 0.5)};\n    border-radius: 6px;\n  }\n`;\n\nconst Subtitle = styled.h5`\n  color: ${GRAY};\n  font-weight: 400;\n`;\n\nconst Pre = styled.pre`\n  margin-bottom: 5px;\n`;\n\nconst Badge = styled.div`\n  margin: 0;\n  padding: 10px;\n  width: 100%;\n  color: ${PURPLE};\n  background-color: ${hexToRGB(PURPLE, 0.2)};\n  font-size: 14px;\n  border-radius: 6px;\n  @media (max-width: 400px) {\n    width: 280px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  @media (max-width: 320px) {\n    width: 220px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  ::selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n  ::-moz-selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n`;\n\nconst Divider = styled.div`\n  border: 1px solid ${DARK_GRAY};\n  height: 1px;\n  margin: 20px 0;\n`;\n\nconst Tag = styled.p`\n  text-align: center;\n  color: ${GRAY};\n  a {\n    color: ${PURPLE};\n    text-decoration: none;\n    ::selection {\n      color: ${WHITE};\n      background-color: ${hexToRGB(PURPLE, 0.5)};\n    }\n    ::-moz-selection {\n      color: ${WHITE};\n      background-color: ${hexToRGB(PURPLE, 0.5)};\n    }\n  }\n  @media (max-width: 320px) {\n    font-size: 14px;\n  }\n  ::selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n  ::-moz-selection {\n    color: ${WHITE};\n    background-color: ${hexToRGB(PURPLE, 0.5)};\n  }\n`;\n\n// =============================================================================\n// Typedefs\n// =============================================================================\n\ninterface Props {\n  publicKey?: PublicKey;\n  connectedMethods: ConnectedMethods[];\n  connect: () => Promise<void>;\n}\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\nconst Sidebar = React.memo((props: Props) => {\n  const { publicKey, connectedMethods, connect } = props;\n\n  return (\n    <Main>\n      <Body>\n        <Link>\n          <img src=\"https://phantom.app/img/phantom-logo.svg\" alt=\"Phantom\" width=\"200\" />\n          <Subtitle>CodeSandbox</Subtitle>\n        </Link>\n        {publicKey ? (\n          // connected\n          <>\n            <div>\n              <Pre>Connected as</Pre>\n              <Badge>{publicKey.toBase58()}</Badge>\n              <Divider />\n            </div>\n            {connectedMethods.map((method, i) => (\n              <Button key={`${method.name}-${i}`} onClick={method.onClick}>\n                {method.name}\n              </Button>\n            ))}\n          </>\n        ) : (\n          // not connected\n          <Button onClick={connect}>Connect to Phantom</Button>\n        )}\n      </Body>\n      {/* 😊 💕  */}\n      <Tag>\n        Made with{' '}\n        <span role=\"img\" aria-label=\"Red Heart Emoji\">\n          ❤️\n        </span>{' '}\n        by the <a href=\"https://phantom.app\">Phantom</a> team\n      </Tag>\n    </Main>\n  );\n});\n\nexport default Sidebar;\n","/**\n * @DEV: If the sandbox is throwing dependency errors, chances are you need to clear your browser history.\n * This will trigger a re-install of the dependencies in the sandbox – which should fix things right up.\n * Alternatively, you can fork this sandbox to refresh the dependencies manually.\n */\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { Connection, PublicKey } from '@solana/web3.js';\n\nimport {\n  createAddressLookupTable,\n  createTransferTransaction,\n  createTransferTransactionV0,\n  extendAddressLookupTable,\n  getProvider,\n  pollSignatureStatus,\n  signAllTransactions,\n  signAndSendTransaction,\n  signAndSendTransactionV0WithLookupTable,\n  signMessage,\n  signTransaction,\n} from './utils';\n\nimport { TLog } from './types';\n\nimport { Logs, Sidebar, NoProvider } from './components';\n\n// =============================================================================\n// Styled Components\n// =============================================================================\n\nconst StyledApp = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100vh;\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\n// =============================================================================\n// Constants\n// =============================================================================\n\n// NB: This URL will only work for Phantom sandbox apps! Please do not use this for your project.\nconst NETWORK = 'https://solana-devnet.g.alchemy.com/v2/WXDiaUJhjPZHLqKNN2HGqbjkMoyLaqAP';\nconst provider = getProvider();\nconst connection = new Connection(NETWORK);\nconst message = 'To avoid digital dognappers, sign below to authenticate with CryptoCorgis.';\n\n// =============================================================================\n// Typedefs\n// =============================================================================\n\nexport type ConnectedMethods =\n  | {\n    name: string;\n    onClick: () => Promise<string>;\n  }\n  | {\n    name: string;\n    onClick: () => Promise<void>;\n  };\n\ninterface Props {\n  publicKey: PublicKey | null;\n  connectedMethods: ConnectedMethods[];\n  handleConnect: () => Promise<void>;\n  logs: TLog[];\n  clearLogs: () => void;\n}\n\n// =============================================================================\n// Hooks\n// =============================================================================\n\n/**\n * @DEVELOPERS\n * The fun stuff!\n */\nconst useProps = (): Props => {\n  const [logs, setLogs] = useState<TLog[]>([]);\n\n  const createLog = useCallback(\n    (log: TLog) => {\n      return setLogs((logs) => [...logs, log]);\n    },\n    [setLogs]\n  );\n\n  const clearLogs = useCallback(() => {\n    setLogs([]);\n  }, [setLogs]);\n\n  useEffect(() => {\n    if (!provider) return;\n\n    // attempt to eagerly connect\n    provider.connect({ onlyIfTrusted: true }).catch(() => {\n      // fail silently\n    });\n\n    provider.on('connect', (publicKey: PublicKey) => {\n      createLog({\n        status: 'success',\n        method: 'connect',\n        message: `Connected to account ${publicKey.toBase58()}`,\n      });\n    });\n\n    provider.on('disconnect', () => {\n      createLog({\n        status: 'warning',\n        method: 'disconnect',\n        message: '👋',\n      });\n    });\n\n    provider.on('accountChanged', (publicKey: PublicKey | null) => {\n      if (publicKey) {\n        createLog({\n          status: 'info',\n          method: 'accountChanged',\n          message: `Switched to account ${publicKey.toBase58()}`,\n        });\n      } else {\n        /**\n         * In this case dApps could...\n         *\n         * 1. Not do anything\n         * 2. Only re-connect to the new account if it is trusted\n         *\n         * ```\n         * provider.connect({ onlyIfTrusted: true }).catch((err) => {\n         *  // fail silently\n         * });\n         * ```\n         *\n         * 3. Always attempt to reconnect\n         */\n\n        createLog({\n          status: 'info',\n          method: 'accountChanged',\n          message: 'Attempting to switch accounts.',\n        });\n\n        provider.connect().catch((error) => {\n          createLog({\n            status: 'error',\n            method: 'accountChanged',\n            message: `Failed to re-connect: ${error.message}`,\n          });\n        });\n      }\n    });\n\n    return () => {\n      provider.disconnect();\n    };\n  }, [createLog]);\n\n  /** SignAndSendTransaction */\n  const handleSignAndSendTransaction = useCallback(async () => {\n    if (!provider) return;\n\n    try {\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransaction',\n        message: `Requesting signature for: ${JSON.stringify(transaction)}`,\n      });\n      const signature = await signAndSendTransaction(provider, transaction);\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransaction',\n        message: `Signed and submitted transaction ${signature}.`,\n      });\n      pollSignatureStatus(signature, connection, createLog);\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'signAndSendTransaction',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  /** SignAndSendTransactionV0 */\n  const handleSignAndSendTransactionV0 = useCallback(async () => {\n    if (!provider) return;\n\n    try {\n      const transactionV0 = await createTransferTransactionV0(provider.publicKey, connection);\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransactionV0',\n        message: `Requesting signature for: ${JSON.stringify(transactionV0)}`,\n      });\n      const signature = await signAndSendTransaction(provider, transactionV0);\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransactionV0',\n        message: `Signed and submitted transactionV0 ${signature}.`,\n      });\n      pollSignatureStatus(signature, connection, createLog);\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'signAndSendTransactionV0',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  /** SignAndSendTransactionV0WithLookupTable */\n  const handleSignAndSendTransactionV0WithLookupTable = useCallback(async () => {\n    if (!provider) return;\n    try {\n      const [lookupSignature, lookupTableAddress] = await createAddressLookupTable(\n        provider,\n        provider.publicKey,\n        connection,\n        await connection.getLatestBlockhash().then((res) => res.blockhash)\n      );\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransactionV0WithLookupTable',\n        message: `Signed and submitted transactionV0 to make an Address Lookup Table ${lookupTableAddress} with signature: ${lookupSignature}. Please wait for 5-7 seconds after signing the next transaction to be able to see the next transaction popup. This time is needed as newly appended addresses require one slot to warmup before being available to transactions for lookups.`,\n      });\n      const extensionSignature = await extendAddressLookupTable(\n        provider,\n        provider.publicKey,\n        connection,\n        await connection.getLatestBlockhash().then((res) => res.blockhash),\n        lookupTableAddress\n      );\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransactionV0WithLookupTable',\n        message: `Signed and submitted transactionV0 to extend Address Lookup Table ${extensionSignature}.`,\n      });\n\n      const signature = await signAndSendTransactionV0WithLookupTable(\n        provider,\n        provider.publicKey,\n        connection,\n        await connection.getLatestBlockhash().then((res) => res.blockhash),\n        lookupTableAddress\n      );\n      createLog({\n        status: 'info',\n        method: 'signAndSendTransactionV0WithLookupTable',\n        message: `Signed and submitted transactionV0 with Address Lookup Table ${signature}.`,\n      });\n      pollSignatureStatus(signature, connection, createLog);\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'signAndSendTransactionV0WithLookupTable',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  /** SignTransaction */\n  const handleSignTransaction = useCallback(async () => {\n    if (!provider) return;\n\n    try {\n      const transaction = await createTransferTransaction(provider.publicKey, connection);\n      createLog({\n        status: 'info',\n        method: 'signTransaction',\n        message: `Requesting signature for: ${JSON.stringify(transaction)}`,\n      });\n      const signedTransaction = await signTransaction(provider, transaction);\n      createLog({\n        status: 'success',\n        method: 'signTransaction',\n        message: `Transaction signed: ${JSON.stringify(signedTransaction)}`,\n      });\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'signTransaction',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  /** SignAllTransactions */\n  const handleSignAllTransactions = useCallback(async () => {\n    if (!provider) return;\n\n    try {\n      const transactions = [\n        await createTransferTransaction(provider.publicKey, connection),\n        await createTransferTransaction(provider.publicKey, connection),\n      ];\n      createLog({\n        status: 'info',\n        method: 'signAllTransactions',\n        message: `Requesting signature for: ${JSON.stringify(transactions)}`,\n      });\n      const signedTransactions = await signAllTransactions(provider, transactions[0], transactions[1]);\n      createLog({\n        status: 'success',\n        method: 'signAllTransactions',\n        message: `Transactions signed: ${JSON.stringify(signedTransactions)}`,\n      });\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'signAllTransactions',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  /** SignMessage */\n  const handleSignMessage = useCallback(async () => {\n    if (!provider) return;\n\n    try {\n      const signedMessage = await signMessage(provider, message);\n      createLog({\n        status: 'success',\n        method: 'signMessage',\n        message: `Message signed: ${JSON.stringify(signedMessage)}`,\n      });\n      return signedMessage;\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'signMessage',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  /** Connect */\n  const handleConnect = useCallback(async () => {\n    if (!provider) return;\n\n    try {\n      await provider.connect();\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'connect',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  /** Disconnect */\n  const handleDisconnect = useCallback(async () => {\n    if (!provider) return;\n\n    try {\n      await provider.disconnect();\n    } catch (error) {\n      createLog({\n        status: 'error',\n        method: 'disconnect',\n        message: error.message,\n      });\n    }\n  }, [createLog]);\n\n  const connectedMethods = useMemo(() => {\n    return [\n      {\n        name: 'Sign and Send Transaction (Legacy)',\n        onClick: handleSignAndSendTransaction,\n      },\n      {\n        name: 'Sign and Send Transaction (v0)',\n        onClick: handleSignAndSendTransactionV0,\n      },\n      {\n        name: 'Sign and Send Transaction (v0 + Lookup table)',\n        onClick: handleSignAndSendTransactionV0WithLookupTable,\n      },\n      {\n        name: 'Sign Transaction',\n        onClick: handleSignTransaction,\n      },\n      {\n        name: 'Sign All Transactions',\n        onClick: handleSignAllTransactions,\n      },\n      {\n        name: 'Sign Message',\n        onClick: handleSignMessage,\n      },\n      {\n        name: 'Disconnect',\n        onClick: handleDisconnect,\n      },\n    ];\n  }, [\n    handleSignAndSendTransaction,\n    handleSignAndSendTransactionV0,\n    handleSignAndSendTransactionV0WithLookupTable,\n    handleSignTransaction,\n    handleSignAllTransactions,\n    handleSignMessage,\n    handleDisconnect,\n  ]);\n\n  return {\n    publicKey: provider?.publicKey || null,\n    connectedMethods,\n    handleConnect,\n    logs,\n    clearLogs,\n  };\n};\n\n// =============================================================================\n// Stateless Component\n// =============================================================================\n\nconst StatelessApp = React.memo((props: Props) => {\n  const { publicKey, connectedMethods, handleConnect, logs, clearLogs } = props;\n\n  return (\n    <StyledApp>\n      <Sidebar publicKey={publicKey} connectedMethods={connectedMethods} connect={handleConnect} />\n      <Logs publicKey={publicKey} logs={logs} clearLogs={clearLogs} />\n    </StyledApp>\n  );\n});\n\n// =============================================================================\n// Main Component\n// =============================================================================\n\nconst App = () => {\n  const props = useProps();\n\n  if (!provider) {\n    return <NoProvider />;\n  }\n\n  return <StatelessApp {...props} />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}